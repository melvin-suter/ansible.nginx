---

- block:

  - name: set fcontext for {{ nginx_ssl_cert | dirname }}
    community.general.sefcontext:
      target: "{{ nginx_ssl_cert  | dirname }}(/.*)?"
      setype: cert_t
      state: present
    when: not nginx_udpate_only

  - name: apply fcontext to {{ nginx_ssl_cert | dirname }}
    ansible.builtin.command: restorecon -irv {{ nginx_ssl_cert  | dirname }}
    when: not nginx_udpate_only



  - name: set fcontext for {{ nginx_default_document_root }}/www
    community.general.sefcontext:
      target: "{{ nginx_default_document_root }}(/.*)?/www(/.*)?"
      setype: httpd_sys_script_exec_t
      state: present

  - name: set fcontext for {{ nginx_default_document_root }}/logs
    community.general.sefcontext:
      target: "{{ nginx_default_document_root }}(/.*)?/logs(/.*)?"
      setype: httpd_log_t
      state: present

  - name: apply fcontext to {{ nginx_default_document_root }}/www
    ansible.builtin.command: restorecon -irv {{ nginx_default_document_root }}



  - name: set fcontext for vhosts (web) with specified documentroot
    community.general.sefcontext:
      target: "{{ item.documentroot }}(/.*)?"
      setype: httpd_sys_script_exec_t
      state: present
    with_items: "{{ nginx_vhosts }}"
    when: item.type == 'web' and item.documentroot is defined
    
  - name: set fcontext for vhosts (web) with specified documentroot
    ansible.builtin.command: restorecon -irv {{ item.documentroot }}
    with_items: "{{ nginx_vhosts }}"
    when: item.type == 'web' and item.documentroot is defined

  - name: activate selinux bools
    ansible.posix.seboolean:
      name: "{{ item }}"
      state: yes
      persistent: yes
    with_items:
    - httpd_enable_cgi
    - httpd_can_network_connect
    - httpd_can_connect_ldap
    - httpd_can_sendmail

  when: nginx_selinux

...




 